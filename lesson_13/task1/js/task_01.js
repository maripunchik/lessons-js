// cуворий режим
"use strict";

// =================================================================

// Генерація всіх підмножин: Реалізуйте рекурсивну функцію, яка генерує всі можливі підмножини заданого масиву. Наприклад,
// для масиву [1, 2, 3] можливі підмножини: [], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3].

if (confirm("Почати тестування?")) {
  function generatePossibleSubsetsOfArr(arr) {
    let result = [];
    function backtrack(index, currentSubset) {
      result.push([...currentSubset]);

      for (let i = index; i < arr.length; i++) {
        currentSubset.push(arr[i]);
        backtrack(i + 1, currentSubset);
        currentSubset.pop(); // повертаємось на попередній рівень
      }
    }
    backtrack(0, []);
    return result;
  }
  const arr = [1, 2, 3];
  const subsets = generatePossibleSubsetsOfArr(arr);

  document.writeln(
    `<div class="task__subtitle task__subtitle task__subtitle--blue task__subtitle--italic">[${subsets.join(
      "],["
    )}]</div>`
  );
}


// =======================================================

//                   []
//                  /  \
//                /      \
//            [1]         []           ← на старті: або беремо 1, або ні
//           /   \           \
//       [1,2]   [1]          [2]      ← на другому кроці: беремо або не беремо 2
//      /     \     \          \
// [1,2,3]  [1,2]  [1,3]       [2,3]   ← далі з 3: беремо або не беремо
//                               \
//                               [3]  ← окремо, якщо взяли лише 3

// Кожен рівень дерева — це один елемент з масиву.

// Кожна гілка:

// ліворуч - ми додаємо елемент

// праворуч - ми пропускаємо елемент

// Усі кінцеві вузли — це одна з можливих підмножин

// ---------

// [] — нічого не вибрали ще

// [1] — додали 1

// [1,2] — додали 2

// [1,2,3] — додали 3 ✅

// [1,2] — пропустили 3

// [1,3] — пропустили 2, додали 3 ✅

// [1] — пропустили і 2, і 3

// [2] — пропустили 1, додали 2

// [2,3] — додали 3 ✅

// [2] — пропустили 3

// [3] — пропустили 1 і 2, додали 3 ✅

// [] — пропустили все

// ----- 
// backtrack(0, [])
//   → Додали [] до result

//   ├── i = 0 → currentSubset = [1]
//   │   backtrack(1, [1])
//   │     → Додали [1]
//   │
//   │     ├── i = 1 → currentSubset = [1, 2]
//   │     │   backtrack(2, [1, 2])
//   │     │     → Додали [1, 2]
//   │     │
//   │     │     └── i = 2 → currentSubset = [1, 2, 3]
//   │     │         backtrack(3, [1, 2, 3])
//   │     │         → Додали [1, 2, 3]
//   │     │
//   │     │         ← pop → [1, 2]
//   │     └── ← pop → [1]
//   │
//   │     └── i = 2 → currentSubset = [1, 3]
//   │         backtrack(3, [1, 3])
//   │         → Додали [1, 3]
//   │
//   │         ← pop → [1]
//   └── ← pop → []

//   ├── i = 1 → currentSubset = [2]
//   │   backtrack(2, [2])
//   │     → Додали [2]
//   │
//   │     └── i = 2 → currentSubset = [2, 3]
//   │         backtrack(3, [2, 3])
//   │         → Додали [2, 3]
//   │
//   │         ← pop → [2]
//   └── ← pop → []

//   └── i = 2 → currentSubset = [3]
//       backtrack(3, [3])
//       → Додали [3]
//       ← pop → []
