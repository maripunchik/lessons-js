// c—É–≤–æ—Ä–∏–π —Ä–µ–∂–∏–º
"use strict";

// =================================================================

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±‚Äô—î–∫—Ç ¬´–¢–∏—Ä¬ª. –£ –º–∞—Å–∏–≤—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è 1, —è–∫—â–æ —É —Ü—å–æ–º—É –∫–≤–∞–¥—Ä–∞—Ç—ñ —î –∑–∞—î—Ü—å —ñ 0 –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
// –ü–æ–ª—è(–≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ) ---------------- –ú–∞—Å–∏–≤, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –ø–æ–ª–µ –∑ –∑–∞–π—Ü—è–º–∏

// –ú–µ—Ç–æ–¥–∏ (–¥—ñ—ó) ------------------–ú–µ—Ç–æ–¥ –ø–æ—Å—Ç—Ä—ñ–ª—É (–∑–∞–¥–∞—î—Ç—å—Å—è –ø–æ–∑–∏—Ü—ñ—è –ø–æ—Å—Ç—Ä—ñ–ª—É)
//------------------------------- –í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è

// =================================================================

const maxShots = 5;
let remainingShots = maxShots;

if (confirm("–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?")) {
  let Tyr = {
    field: [],
    size: 5,
    rabbitsCount: 5,

    initField() {
      // –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–≥—ñ–¥–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –≤—á–∏—Ç–µ–ª—è
      this.field = [];

      for (let i = 0; i < this.size; i++) {
        this.field[i] = [];
        for (let j = 0; j < this.size; j++) {
          this.field[i][j] = 0;
        }
      }

      let rabbitsPlaced = 0;

      while (rabbitsPlaced < this.rabbitsCount) {
        let randX = Math.floor(Math.random() * this.size);
        let randY = Math.floor(Math.random() * this.size);

        if (this.field[randX][randY] === 0) {
          this.field[randX][randY] = 1;
          rabbitsPlaced++;
        }
      }
    },

    // –ú–µ—Ç–æ–¥ –ø–æ—Å—Ç—Ä—ñ–ª—É
    shoot(x, y) {
      try {
        if (
          isNaN(x) ||
          isNaN(y) ||
          x < 0 ||
          y < 0 ||
          x >= this.size ||
          y >= this.size
        ) {
          throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –ø–æ—Å—Ç—Ä—ñ–ª—É.");
        }

        if (this.field[x][y] === "üéØ" || this.field[x][y] === "‚ùå") {
          alert(
            `‚ö†Ô∏è –í–∏ –≤–∂–µ —Å—Ç—Ä—ñ–ª—è–ª–∏ –≤ (${x + 1}, ${
              y + 1
            }). –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –∫–ª—ñ—Ç–∏–Ω–∫—É.`
          );
          return;
        }

        if (this.field[x][y] === 1) {
          alert(`üéØ –í–∏ –≤–ª—É—á–∏–ª–∏ –≤ (${x + 1},${y + 1})! –ó–∞—î—Ü—å –ø—ñ–¥—Å—Ç—Ä–µ–ª–µ–Ω–∏–π!`);
          this.field[x][y] = "üéØ";
          this.rabbitsCount--;
        } else {
          alert(`‚ùå –í–∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å! –£ (${x + 1},${y + 1}) –∑–∞–π—Ü—è –Ω–µ–º–∞—î.`);
          this.field[x][y] = "‚ùå";
        }
      } catch (error) {
        alert(`‚ö†Ô∏è ${error.message}`);
      }
    },

    // –ú–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    showField() {
      let tableContent = "";

      for (let i = 0; i < this.size; i++) {
        tableContent += "<tr>";
        tableContent += `<td><strong>${i + 1}</strong></td>`;
        for (let j = 0; j < this.size; j++) {
          if (this.field[i][j] === 1) {
            tableContent += `<td>üê∞</td>`;
          } else if (this.field[i][j] === "üéØ") {
            tableContent += `<td>üéØ</td>`;
          } else if (this.field[i][j] === "‚ùå") {
            tableContent += `<td>‚ùå</td>`;
          } else {
            tableContent += `<td>ü•ï</td>`;
          }
        }
        tableContent += "</tr>";
      }

      let colHeader = "<tr><th>üçÄ</th>";
      for (let i = 1; i <= this.size; i++) {
        colHeader += `<th>${i}</th>`;
      }
      colHeader += "</tr>";

      document.writeln(`
        <table class="task__table task__table task__table--small">
          <thead>${colHeader}</thead>
          <tbody>${tableContent}</tbody>
        </table>
      `);
    },

    isGameOver() {
      return this.rabbitsCount === 0;
    },
  };

  // –ó–∞–ø—É—Å–∫ –≥—Ä–∏
  Tyr.initField();

  // –ì—Ä–∞
  while (remainingShots > 0) {
    let x = prompt(
      `–ó–∞–ª–∏—à–∏–ª–æ—Å—å –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤: ${remainingShots}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –†–Ø–î–ö–ê (1-${Tyr.size}) –∞–±–æ 'exit':`
    );
    if (x === null || x.toLowerCase() === "exit") {
      alert("–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≥—Ä–∞–≤—Ü–µ–º.");
      break;
    }

    let y = prompt(`–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –°–¢–û–í–ü–¶–Ø (1-${Tyr.size}):`);
    if (y === null || y.toLowerCase() === "exit") {
      alert("–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≥—Ä–∞–≤—Ü–µ–º.");
      break;
    }

    x = Number(x) - 1;
    y = Number(y) - 1;

    if (
      isNaN(x) ||
      isNaN(y) ||
      x < 0 ||
      y < 0 ||
      x >= Tyr.size ||
      y >= Tyr.size
    ) {
      alert("‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      continue;
    }

    Tyr.shoot(x, y);
    remainingShots--;

    if (Tyr.isGameOver()) {
      alert("üéâ –í–∏ –ø—ñ–¥—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤—Å—ñ—Ö –∑–∞–π—Ü—ñ–≤! –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
      break;
    }

    if (remainingShots === 0) {
      alert("‚ùå –ü–æ—Å—Ç—Ä—ñ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å. –ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
    }
  }

  Tyr.showField();
}
