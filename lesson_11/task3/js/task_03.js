// c—É–≤–æ—Ä–∏–π —Ä–µ–∂–∏–º
"use strict";

// =================================================================

// –ú–æ—Ä—Å—å–∫–∏–π –±—ñ–π. –í–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º –Ω–∞ –¥–≤–æ–≤–∏–º—ñ—Ä–Ω–æ–º—É –ø–æ–ª—ñ —Ä–æ–∑–º—ñ—Ä–æ–º 6*6 —Ä–æ–∑—Ç–∞—à–æ–≤—É—î—Ç—å—Å—è 5 –∫–æ—Ä–∞–±–ª—ñ–≤. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç—Ä—ñ–ª—è—î –≤–∫–∞–∑—É—é—á–∏
// –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –ì—Ä–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è –ø–æ–∫–∏ –Ω–µ –ø–æ—Ç–æ–ø–ª–µ–Ω–æ —É—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –∞–±–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–∞–∫—ñ–Ω—á–∞—Ç—å—Å—è —Å–Ω–∞—Ä—è–¥–∏.

if (confirm("–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?")) {
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ–ª—è
  function generateRandomField(rowsNum, colsNum) {
    const field = [];
    for (let rowIndex = 0; rowIndex < rowsNum; rowIndex++) {
      field.push([]);
      for (let colIndex = 0; colIndex < colsNum; colIndex++) {
        field[rowIndex].push("üü¶");
      }
    }
    return field;
  }
  // –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤
  function placeShips(field, numShips) {
    let shipsPlaced = 0;
    while (shipsPlaced < numShips) {
      const row = Math.floor(Math.random() * 6);
      const col = Math.floor(Math.random() * 6);

      if (field[row][col] !== "üö¢") {
        field[row][col] = "üö¢";
        shipsPlaced++;
      }
    }
  }

  // –§—É–Ω–∫—Ü—ñ—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ–ª—è –Ω–∞ –µ–∫—Ä–∞–Ω —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ

  function printField(field) {
    let tableContent = field
      .map((row, rowIndex) => {
        return `<tr>
          <td>${rowIndex + 1}</td>
          ${row.map((el) => `<td>${el}</td>`).join("")}
        </tr>`;
      })
      .join("");

    document.writeln(`
  <table class="task__table">
    <thead>
        <tr>
		  <th>‚öîÔ∏è</th>
    <th>1</th>
    <th>2</th>
    <th>3</th>
    <th>4</th>
    <th>5</th>
    <th>6</th>
  </tr>
    </thead>
    <tbody>
      ${tableContent}
    </tbody>
  </table>
`);
  }

  const field = generateRandomField(6, 6);
  const numShips = 5;
  const maxShots = 10;

  //—Ä–æ–∑–º—ñ—â—É—î–º–æ –∫–æ—Ä–∞–±–ª—ñ
  placeShips(field, numShips);

  let remainingShots = maxShots;
  let killedShips = 0;

  while (remainingShots > 0 && killedShips < numShips) {
    try {
      let userRowInput =
        prompt(
          `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–ª—ñ—Ç–∏–Ω–∫–∏ —Ä—è–¥–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä—ñ–ª—É. (–í—ñ–¥ 1 –¥–æ 6). –ó–∞–ª–∏—à–∏–ª–æ—Å—è ${remainingShots} –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤.`
        )

		   if (userRowInput === null) {
        alert("–í–∏ –≤–∏–π—à–ª–∏ –∑ –≥—Ä–∏.");
        break;
      }
		userRowInput = parseInt(userRowInput);

      let userColInput =  prompt(
          `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–ª—ñ—Ç–∏–Ω–∫–∏ —Å—Ç–æ–≤–ø—á–∏–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä—ñ–ª—É. (–í—ñ–¥ 1 –¥–æ 6). –ó–∞–ª–∏—à–∏–ª–æ—Å—è ${remainingShots} –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤.`
        )
      
		   if (userColInput === null) {
        alert("–í–∏ –≤–∏–π—à–ª–∏ –∑ –≥—Ä–∏.");
        break;
      }
      userColInput = parseInt(userColInput);

      if (
        isNaN(userRowInput) ||
        isNaN(userColInput) ||
        userRowInput < 1 ||
        userRowInput > 6 ||
        userColInput < 1 ||
        userColInput > 6
      ) {
        throw new Error(
          "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏! –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è(1-6)"
        );
      }

      userRowInput -= 1;
      userColInput -= 1;

      if (field[userRowInput][userColInput] === "üö¢") {
        alert("–í–∏ –≤–ª—É—á–∏–ª–∏!");
        field[userRowInput][userColInput] = "‚ùå";
        killedShips++;
      } else if (field[userRowInput][userColInput] === "üü¶") {
        alert("–í–∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—è!");
        field[userRowInput][userColInput] = "‚≠ï";
      } else {
        alert(`–í–∏ –≤–∂–µ —Å—Ç—Ä—ñ–ª—è–ª–∏ –≤ —Ü–µ –º—ñ—Å—Ü–µ!`);
      }
      remainingShots--;
    } catch (error) {
      alert(error.message);
    }
  }
  // –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∏
  if (killedShips === numShips) {
    alert("–í—ñ—Ç–∞—î–º–æ! –í—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –ø–æ—Ç–æ–ø–ª–µ–Ω—ñ!");
  } else {
    alert("–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∏ –Ω–µ –ø–æ—Ç–æ–ø–∏–ª–∏ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ");
  }
  printField(field);
}

// =================================================================
